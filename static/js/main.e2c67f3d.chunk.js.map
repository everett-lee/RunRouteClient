{"version":3,"sources":["components/providers/CoordProvider.js","components/map/MapDisplay.js","components/form/Slider.js","components/form/MainFormTop.js","components/form/CheckBox.js","components/form/MainFormMid.js","components/form/Options.js","components/RouteDetailsSegment.js","components/Modal.js","components/providers/ApiProvider.js","components/StartCoordsRetriever.js","components/sidebar/SidebarSection.js","components/App.js","components/providers/RouteProvider.js","index.js"],"names":["CoordContext","createContext","MapDisplay","_ref","routeCoords","coordsContext","useContext","_useState","useState","_useState2","Object","slicedToArray","zoom","setZoom","updateCoords","e","lat","latlng","lon","lng","setCoords","zoomChangeHanlder","target","_zoom","position","coords","preRouteLoad","react_default","a","createElement","Map","center","onmouseDown","onZoomend","TileLayer","url","Marker","postRouteLoad","onClick","Polyline","color","positions","routeCoordsLen","length","arrayHalved","Math","floor","slice","outwardSection","opacity","returnSection","Slider","onSliderInputChange","className","type","onChange","event","min","max","defaultValue","id","MainFormTop","onDistanceInput","maxGradient","Form","Group","widths","Field","placeholder","form_Slider","style","marginTop","OptionsCheckBox","arg","label","onInputChange","MainFormMid","onAvoidedFeaturesButtonInputChange","onPreferredFeaturesButtonInputChange","CheckBox","Options","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","distance","value","option","currentBool","state","avoidedFeatures","avoidedFeaturesObject","preferredFeatures","preferredFeaturesObject","majorRoads","steps","concrete","unlit","uphill","residential","backroads","grassOrDirt","_this2","Segment","form_MainFormTop","form_MainFormMid","makeRequest","resetMap","React","Component","RouteDetailsSegment","routeName","routeDistance","routeGradient","toFixed","gradient","Grid","columns","textAlign","Column","concat","modalRoot","document","getElementById","Modal","el","appendChild","removeChild","ReactDOM","createPortal","active","text","ApiContext","StartCoordsContainer","apiContext","useEffect","window","navigator","geolocation","getCurrentPosition","latitude","longitude","sendCoords","error","console","log","SidebarSection","name","reloadOldRoute","content","App","coordContext","nullRoute","routeObject","setRouteObject","_useState3","_useState4","sideBarSegments","setsideBarSegments","Sidebar","visible","map","item","sidebar_SidebarSection","key","form_Options","options","sendRequest","then","sidebarRouteObject","components_RouteDetailsSegment","map_MapDisplay","StartCoordsRetriever","RouteContext","render","children","domain","modalText","setModalText","modalActive","setModal","_ref2","asyncToGenerator","regenerator_default","mark","_callee","query","response","wrap","_context","prev","next","convertToQuery","axios","get","catch","handleError","sent","abrupt","parseCoords","data","pathNodes","startingWay","averageGradient","stop","_x","_x2","_x3","apply","arguments","pathNodesArray","keys","filter","errorMessage","message","Promise","resolve","setTimeout","avoidedFeaturesBools","values","preferredFeaturesBools","seperator","distanceToMetres","components_Modal","Provider","components_App","querySelector"],"mappings":"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","file":"static/js/main.e2c67f3d.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\n\nconst CoordContext = createContext();\n\nconst CoordProvider = ({ children }) => {\n    const initialState = { lat: 51.505, lon: -0.09 };\n    const [coords, setCoords] = useState(initialState);\n\n    return (\n        <CoordContext.Provider value={{ coords, setCoords }}>\n            {children}\n        </ CoordContext.Provider>\n    );\n};\n\nexport { CoordContext, CoordProvider };","import React, { useState, useContext } from 'react';\n\nimport { Map, Marker, TileLayer, Polyline } from 'react-leaflet';\nimport { CoordContext } from '../providers/CoordProvider';\n\n// main map display class for presenting the current\n// location and route\nconst MapDisplay = ({ routeCoords }) => {\n\n  const coordsContext = useContext(CoordContext);\n  const [zoom, setZoom] = useState(13);\n\n  // update current position based on click. This invokes the\n  // coordinates context provider component method\n  const updateCoords = (e) => {\n\n    const lat = e.latlng.lat;\n    const lon = e.latlng.lng;\n\n    coordsContext.setCoords({ lat, lon });\n  };\n\n  // update zoom state when map view changed\n  const zoomChangeHanlder = (e) => {\n    setZoom(e.target._zoom);\n  };\n\n  // get outward journey section of the coordinates\n  const outwardSection = () => {\n    const routeCoordsLen = routeCoords ? routeCoords.length : 0;\n    const arrayHalved = routeCoordsLen > 0 ? Math.floor(routeCoordsLen / 2) : 0;\n\n    if (routeCoords) {\n      return routeCoords.slice(0, arrayHalved);\n    }\n  };\n\n  // get return journey section of the coordinates\n  const returnSection = () => {\n    const routeCoordsLen = routeCoords ? routeCoords.length : 0;\n    const arrayHalved = routeCoordsLen > 0 ? Math.floor(routeCoordsLen / 2) : 0;\n\n    if (routeCoords) {\n      return routeCoords.slice(arrayHalved - 1, routeCoordsLen);\n    }\n  };\n\n  const position = [coordsContext.coords.lat, coordsContext.coords.lon];\n\n  // map to display without route\n  const preRouteLoad = (\n    <Map center={position} onmouseDown={(e) => updateCoords(e)}\n      onZoomend={(e) => zoomChangeHanlder(e)} zoom={zoom}>\n      <TileLayer\n        url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'\n      />\n      <Marker position={position} >\n      </Marker>\n    </Map>\n  );\n\n  // map to display when the route has been loaded \n  const postRouteLoad = (\n    <Map center={position} onClick={(e) => updateCoords(e)}\n      onZoomend={(e) => zoomChangeHanlder(e)} zoom={zoom}>\n      <TileLayer\n        url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'\n      />\n\n      <Polyline color=\"blue\" positions={outwardSection()} />\n      <Polyline color=\"red\" opacity={0.7} positions={returnSection()} />\n    </Map>\n  );\n\n  if (!routeCoords) {\n    return preRouteLoad;\n  } else {\n    return postRouteLoad;\n  }\n};\n\nexport default MapDisplay;  ","import React from 'react';\n\nconst Slider = ({ onSliderInputChange }) => {\n    return (\n        <div className=\"slidecontainer\">\n            <input type=\"range\" onChange={event => onSliderInputChange(event)}\n                min={0} max={30} defaultValue={15} className=\"slider\" id=\"myRange\" />\n        </div>\n    );\n};\n\nexport default Slider;","import React from 'react';\nimport Slider from './Slider';\nimport { Form } from 'semantic-ui-react';\n\n// the top part of the main input form\nconst MainFormTop = ( { onDistanceInput, onSliderInputChange, maxGradient } ) =>\n    (\n     <Form>\n        <Form.Group widths='equal'>\n             <Form.Field>\n             <label>Target distance (KM)</label>\n                    <input type=\"text\" onChange={ (e) => onDistanceInput(e) } \n                    placeholder=\"Distance (KM)\" />\n             </Form.Field>\n             <Form.Field>\n                     <label>Maximum gradient</label>\n                    <Slider onSliderInputChange={onSliderInputChange}/>\n             </Form.Field>\n             <div className=\"maxGradientVal\" style={{marginTop: '20px'}}>\n                            {maxGradient}%\n             </div>\n        </Form.Group>\n    </Form> \n);\n\nexport default MainFormTop;\n","import React from 'react';\n\nconst OptionsCheckBox = ({ arg, label, onInputChange }) => {\n    return (\n        <div className=\"ui checkbox\">\n            <input type=\"checkbox\" onClick={() =>\n                onInputChange(arg)}></input>\n            <label>{label}</label>\n        </div>\n    );\n};\n\nexport default OptionsCheckBox;\n","import React from 'react';\nimport { Form } from 'semantic-ui-react';\nimport CheckBox from './CheckBox';\n\n// the middle part of the main input form\nconst MainFormMid = ({ onAvoidedFeaturesButtonInputChange, onPreferredFeaturesButtonInputChange }) =>\n    (\n        <Form>\n            <Form.Group widths='equal'>\n                <Form.Field>\n                    <label>Features to avoid</label>\n                    <div>\n                        <CheckBox onInputChange={onAvoidedFeaturesButtonInputChange}\n                            arg=\"majorRoads\" label=\"Major roads\" />\n                    </div>\n                    <div>\n                        <CheckBox onInputChange={onAvoidedFeaturesButtonInputChange}\n                            arg=\"steps\" label=\"Steps\" />\n                    </div>\n                    <div>\n                        <CheckBox onInputChange={onAvoidedFeaturesButtonInputChange}\n                            arg=\"concrete\" label=\"Concrete\" />\n                    </div>\n                    <div>\n                        <CheckBox onInputChange={onAvoidedFeaturesButtonInputChange}\n                            arg=\"unlit\" label=\"Unlit streets\" />\n                    </div>\n                </Form.Field>\n                <Form.Field>\n                    <label>Preferred features</label>\n                    <div>\n                        <CheckBox onInputChange={onPreferredFeaturesButtonInputChange}\n                            arg=\"uphill\" label=\"Prefer uphill\" />\n                    </div>\n                    <div>\n                        <CheckBox onInputChange={onPreferredFeaturesButtonInputChange}\n                            arg=\"residential\" label=\"Residential streets\" />\n                    </div>\n                    <div>\n                        <CheckBox onInputChange={onPreferredFeaturesButtonInputChange}\n                            arg=\"grassOrDirt\" label=\"Unpaved sufaces\" />\n                    </div>\n                    <div>\n                        <CheckBox onInputChange={onPreferredFeaturesButtonInputChange}\n                            arg=\"backroads\" label=\"Backroads and pathways\" />\n                    </div>\n                </Form.Field>\n            </Form.Group>\n        </Form>\n    );\n\nexport default MainFormMid;\n","import React from 'react';\nimport MainFormTop from './MainFormTop';\nimport MainFormMid from './MainFormMid';\nimport { Segment } from 'semantic-ui-react';\n\n// used to provide paramaters for the route\n// generation process\nclass Options extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const avoidedFeaturesObject =\n        {\n            majorRoads: false,\n            steps: false,\n            concrete: false,\n            unlit: false\n        };\n\n        const preferredFeaturesObject =\n        {\n            uphill: false,\n            residential: false,\n            backroads: false,\n            grassOrDirt: false,\n        };\n\n        this.state = {\n            distance: null,\n            maxGradient: 15,\n            avoidedFeatures: avoidedFeaturesObject,\n            preferredFeatures: preferredFeaturesObject\n        };\n    }\n\n    // update distance on input\n    onDistanceInput = (event) => {\n        this.setState({ distance: event.target.value });\n    }\n\n    // update max gradient on change to slider value\n    onSliderInputChange = (event) => {\n        this.setState({ maxGradient: event.target.value });\n    }\n\n    // handles clicks for checkbox options\n    onAvoidedFeaturesButtonInputChange = (option) => {\n        const currentBool = this.state.avoidedFeatures[option];\n        const avoidedFeaturesObject = this.state.avoidedFeatures;\n\n        // negate the current value when the checkbox is clicked\n        avoidedFeaturesObject[option] = !currentBool;\n\n        this.setState({ avoidedFeatures: avoidedFeaturesObject });\n    }\n\n    // handles clicks for checkbox options\n    onPreferredFeaturesButtonInputChange = (option) => {\n        const currentBool = this.state.preferredFeatures[option];\n        const preferredFeaturesObject = this.state.preferredFeatures;\n\n        // negate the current value when the checkbox is clicked\n        preferredFeaturesObject[option] = !currentBool;\n\n        this.setState({ preferredFeatures: preferredFeaturesObject });\n    }\n\n    render(props) {\n        return (\n            <Segment>\n                <MainFormTop\n                    onSliderInputChange={this.onSliderInputChange}\n                    onDistanceInput={this.onDistanceInput}\n                    maxGradient={this.state.maxGradient}\n                />\n                <MainFormMid\n                    onAvoidedFeaturesButtonInputChange={this.onAvoidedFeaturesButtonInputChange}\n                    onPreferredFeaturesButtonInputChange={this.onPreferredFeaturesButtonInputChange}\n                />\n                <button onClick={() => this.props.makeRequest(this.state)} className=\"ui button\">\n                    Find route\n                </button>\n                <button onClick={() => this.props.resetMap()} className=\"ui button\">\n                    Save route\n                </button>\n            </Segment>\n        )\n    }\n}\nexport default Options;","import React from 'react';\nimport { Segment, Grid } from 'semantic-ui-react';\n\n// displays details of a generated route \nconst RouteDetailsSegment = ({ coords, routeName, routeDistance, routeGradient }) => {\n    const lat = coords.lat.toFixed(2);\n    const lon = coords.lon.toFixed(2);\n\n    const distance = routeDistance ? (routeDistance / 1000).toFixed(1) + 'KM' : ''\n    const gradient = routeGradient ? (routeGradient * 100).toFixed(1) + '%' : '';\n\n    return (\n        <Segment >\n            <Grid columns={3} textAlign={\"center\"}>\n                <Grid.Column>\n                    {`Route start: ${routeName ?\n                        routeName : ' '}`} ({lat}, {lon})\n            </Grid.Column>\n                <Grid.Column>\n                    {`Distance: ${distance}`}\n                </Grid.Column>\n                <Grid.Column>\n                    {`Average gradient: ${gradient}`}\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n};\n\nexport default RouteDetailsSegment;","import React from 'react';\nimport ReactDOM from 'react-dom'\n\nconst modalRoot = document.getElementById('modal-root');\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement('div');\n  };\n\n  componentDidMount() {\n    modalRoot.appendChild(this.el);\n  };\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  };\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className={`ui dimmer modals visibile ${this.props.active === true ? \"active\" : \"\"}`}>\n        <div className={`ui standard modal visible ${this.props.active === true ? \"active\" : \"\"}`}>\n          <div className={`ui inverted dimmer ${this.props.active === true ? \"active\" : \"\"}`}>\n            <div className=\"ui big text loader\">{this.props.text}</div>\n          </div>\n        </div>\n      </div>,\n      this.el\n    );\n  }\n}\n\nexport default Modal;","import React from 'react';\nimport { useState, createContext } from 'react';\nimport Modal from '../Modal';\nimport axios from 'axios';\n\nconst ApiContext = createContext();\n\n// manages the creation and dispatch of HTTP \n// requests to the server. Also renders modal\n// 'spinner' while request is being sent.\nconst ApiProvider = ({ children }) => {\n    const domain = \"http://localhost:8080\";\n\n    const [modalText, setModalText] = useState(\"Generating route\");\n    const [modalActive, setModal] = useState(false);\n\n    // send initial coordinates to API endpoint to begin generating \n    // the graph\n    const sendCoords = (lat, lon) => {\n        const query = `lat=${lat}&lon=${lon}`;\n        const head = \"/start/args?\";\n\n        axios.get(domain + head + query)\n            .catch((error) => console.log(error));\n    }\n\n    // send full query to API in order to generate the path\n    const sendRequest = async (options, lat, lon) => {\n        setModalText(\"Generating route\");\n\n        const query = convertToQuery(options, lat, lon);\n\n        // modal is active during graph generation\n        setModal(true);\n\n        const response = await axios\n            .get(query)\n            .catch((error) => handleError(error));\n\n        // update modal text\n        setModal(false);\n\n        if (response) {\n            return {\n                routeCoords: parseCoords(response.data.pathNodes),\n                routeName: response.data.startingWay,\n                routeDistance: response.data.distance,\n                routeGradient: response.data.averageGradient\n            };\n        };\n    };\n\n    // parse JSON response from server to retrieve the route\n    // coordinates\n    const parseCoords = (pathNodesArray) => {\n        const coords = pathNodesArray.map(el => Object.keys(el)\n            .filter(key => key !== \"id\") // remove the ids\n            .map(key => el[key])); // map to lat/lon values\n\n        return coords;\n    }\n\n    const handleError = (error) => {\n        let errorMessage;\n        if (error.response) {\n            errorMessage = error.response.data.message;\n        } else {\n            errorMessage = \"Unable to reach the server\";\n        }\n        setModalText(`Error: ${errorMessage}`);\n        // keep modal on screen for two seconds\n        return new Promise(resolve => setTimeout(resolve, 2000));\n    }\n\n    // take the user-specified options and return a string\n    // matching the API    \n    const convertToQuery = (options, lat, lon) => {\n        const avoidedFeaturesBools = Object.values(options.avoidedFeatures)\n        const preferredFeaturesBools = Object.values(options.preferredFeatures)\n        const seperator = avoidedFeaturesBools.length === 0 ? \"\" : \",\"\n        const head = \"/route/args?\";\n\n        // convert KM to metres\n        const distanceToMetres = options.distance * 1000;\n        // convert to fraction\n        const maxGradient = options.maxGradient / 100;\n\n        const query = domain + head\n            + `lat=${lat.toFixed(6)}&lon=${lon.toFixed(6)}&`\n            + `distance=${distanceToMetres}&maxGradient=${maxGradient}&`\n            + `options=${avoidedFeaturesBools + seperator + preferredFeaturesBools}`\n\n        return query;\n    }\n\n    return (\n        <div>\n            <Modal active={modalActive} text={modalText}>\n            </Modal>\n            <ApiContext.Provider value={{ sendCoords, sendRequest }}>\n                {children}\n            </ ApiContext.Provider>\n        </div>\n    );\n};\nexport { ApiContext, ApiProvider };","import { useEffect, useContext } from 'react';\nimport { CoordContext } from './providers/CoordProvider';\nimport { ApiContext } from './providers/ApiProvider';\n\n// retrieves the user's coordinates on loading the map\nconst StartCoordsContainer = () => {\n\n    const coordsContext = useContext(CoordContext);\n    const apiContext = useContext(ApiContext);\n\n    // get the current location from the user once\n    // on first load \n    useEffect(() => {\n        window.navigator.geolocation.getCurrentPosition(\n            (position) => {\n                let lat = position.coords.latitude;\n                let lon = position.coords.longitude;\n                // update lat and lon in context\n                coordsContext.setCoords({ lat, lon });\n\n                // send request to API to begin graph generation\n                apiContext.sendCoords(lat, lon);\n            },\n            (error) => console.log(error)\n        );\n    }, []);\n\n    return null;\n};\nexport default StartCoordsContainer;","import React from 'react';\nimport { Segment } from 'semantic-ui-react';\n\nconst SidebarSection = ({ name, routeCoords, distance, gradient, reloadOldRoute }) => {\n    return <Segment content={name}\n        id=\"sidebarSegment\"\n        textAlign={\"center\"}\n        onClick={() =>\n            reloadOldRoute(routeCoords, name, distance, gradient)} />\n};\nexport default SidebarSection;","import React, { useContext, useState } from 'react';\nimport { Sidebar } from 'semantic-ui-react';\n\nimport MapDisplay from './map/MapDisplay';\nimport Options from './form/Options';\nimport RouteDetailsSegment from './RouteDetailsSegment';\nimport StartCoordsRetriever from './StartCoordsRetriever';\nimport SidebarSection from './sidebar/SidebarSection';\n\nimport { ApiContext } from './providers/ApiProvider';\nimport { CoordContext } from './providers/CoordProvider';\n\nconst App = () => {\n    const apiContext = useContext(ApiContext);\n    const coordContext = useContext(CoordContext);\n\n    const nullRoute = {\n        routeCoords: null,\n        routeName: null,\n        routeDistance: null,\n        routeGradient: null };\n\n    const [routeObject, setRouteObject] = useState(nullRoute);\n    const [sideBarSegments, setsideBarSegments] = useState([]);\n   \n    // send request to server containing coordinates along with\n    // the route parameters  \n    const makeRequest = (options) => {\n        const coords = coordContext.coords;\n        const response = apiContext.sendRequest(options, coords.lat, coords.lon);\n\n        // update state with returned coordinates and updated map setting\n        response.then ( routeObject => {\n            setRouteObject(routeObject || nullRoute);\n        });\n    };\n\n    // reset routeCoords. Causes map to re-render to default position\n    const resetMap = () => {\n        // if an unsaved route has been generated\n        if (routeObject.routeName) {\n            // the number of generated routes\n            const key = sideBarSegments.length;\n            \n            const sidebarRouteObject = { name: routeObject.routeName,\n                            distance: routeObject.routeDistance,\n                            routeCoords: routeObject.routeCoords, \n                            gradient: routeObject.routeGradient,\n                            key: key }; \n                \n            // push route to the sidebar\n            setsideBarSegments(sideBarSegments.concat([sidebarRouteObject]));\n        };\n        setRouteObject(nullRoute);\n    };\n\n    // retrieves old route when corresponding sidebar button is clicked\n    const reloadOldRoute = (routeCoords, routeName, routeDistance, routeGradient) => {\n        setRouteObject( { routeCoords, routeName, routeDistance, routeGradient } );\n    };\n\n    const renderSidebarSections = () => {\n        return (\n            sideBarSegments.map( (item) => {\n            // render each route from the route object created by the\n            // reset map method\n            return <SidebarSection routeCoords={ item.routeCoords }\n                                   name={ item.name }\n                                   distance ={ item.distance }\n                                   gradient = { item.gradient }\n                                   key={ item.key } \n                                   reloadOldRoute={ reloadOldRoute } />\n            })\n        );\n    };\n\n    return (\n        <div>\n                <Sidebar visible={true}>\n                        { renderSidebarSections() }\n                </Sidebar>\n                <div className=\"ui container\">\n                    <Options makeRequest={ makeRequest }\n                            resetMap={ resetMap } />\n                    <RouteDetailsSegment\n                                        coords={ coordContext.coords}\n                                        routeName={ routeObject.routeName }\n                                        routeDistance={ routeObject.routeDistance }\n                                        routeGradient={ routeObject.routeGradient } />\n                    <div className=\"map-display-div\">\n                        <MapDisplay routeCoords={ routeObject.routeCoords } />                \n                    </div>\n                    <StartCoordsRetriever />\n                </div>\n        </div>\n        );\n};\n\nexport default App;","import React, { useState, createContext } from 'react';\n\nconst RouteContext = createContext();\n\nconst RouteProvider = ({ children }) => {\n    const initialState = {\n        routeCoords: null,\n        routeName: null,\n        routeDistance: null,\n        routeGradient: null\n    };\n\n    const [routeObject, setRouteObject] = useState(initialState);\n\n    return (\n        <RouteContext.Provider value={{ routeObject, setRouteObject }}>\n            {children}\n        </ RouteContext.Provider>\n    );\n};\n\nexport { RouteContext, RouteProvider };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { ApiProvider } from './components/providers/ApiProvider';\nimport { CoordProvider } from './components/providers/CoordProvider';\nimport { RouteProvider } from './components/providers/RouteProvider';\n\nReactDOM.render(<ApiProvider> \n                    <CoordProvider>\n                        <RouteProvider>\n                            <App /> \n                        </RouteProvider>\n                    </CoordProvider>\n                </ApiProvider>\n                ,\n                document.querySelector('#app-root')); "],"sourceRoot":""}